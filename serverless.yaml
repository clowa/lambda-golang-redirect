# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: lambda-golang-redirect # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
frameworkVersion: ">=2.0.0"

provider:
  name: aws
  runtime: provided.al2
  region: eu-central-1
  architecture: arm64
  memorySize: 128
  stage: prod
  # Function environment variables
  environment:
    REDIRECT_TO: https://github.com/clowa
    HSTS_ENABLED: true
    HSTS_MAX_AGE: 60
  # Duration for CloudWatch log retention (default: forever)
  logRetentionInDays: 7
  stackTags:
    app: ${self:service}
    stage: ${self:provider.stage}
    deploymentMethod: serverless
    repository: clowa/lambda-golang-redirect

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

package:
  patterns:
    - "!./**"
    - "./bin/**"
    - "./bootstrap"

functions:
  redirect:
    handler: bootstrap
    events:
      - http:
          path: /
          method: get

plugins:
  - serverless-certificate-creator
  - serverless-domain-manager
  - serverless-plugin-resource-tagging

custom:
  domains:
    # References to 'prod' stage
    prod:
      domainName: clowa.de
      certificateName: clowa.de

  customCertificate:
    # Route 53 Hosted Zone name
    # don't forget the dot on the end!
    hostedZoneNames: "clowa.de."
    certificateName: ${self:custom.domains.${self:provider.stage}.certificateName}
    region: ${self:provider.region}

  customDomain:
    rest:
      apiType: rest
      endpointType: regional
      domainName: ${self:custom.domains.${self:provider.stage}.domainName}
      stage: ${self:provider.stage}
      securityPolicy: tls_1_2
      certificateName: ${self:custom.customCertificate.certificateName}
      createRoute53Record: true
      createRoute53IPv6Record: true
      autoDomain: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
